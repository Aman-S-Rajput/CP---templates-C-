const int N = 1e6+6;
vector<int>fac;
vector<int> makefac(int n = N, int m = mod)
{
    vector<int>f(n,-1);
    f[0] = f[1] = 1;
    for(int i = 2; i < n ; i++){
        f[i] = (f[i-1]*i)%m;
    }
    return f;
}
int modbinexp(int a,int b, int m = mod){
    if(b==0){return 1;}
    int res = 1;
    while(b){if(b&1){res= (a*res)%m;}b>>=1; a = (a*a)%m;}return (res%m);
}
int modInverse(int n){return modbinexp(n, mod-2);}
int nck(int n,int k){
    // Distribute n stuff among k things where both n and k are not unique 
    // if n is unique multiply by (n!) and if k is unique multiply by ((n-k)!)
    if(n>= N || (k>= N)){
        cout<<"Increase N\n";return -1;
    }
    int p = fac[n];p = (p*modInverse(fac[n-k]))%mod;p = (p*modInverse(fac[k]))%mod;
    return p;
}