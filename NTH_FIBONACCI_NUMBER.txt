vector<vector<int>> identityMatrix = {
    {1, 0}, 
    {0, 1}
};
vector<vector<int>> result = {
    {0, 0},
    {0, 0}
};

void multiply(vector<vector<int>> a, vector<vector<int>> b) {
    vector<vector<int>> temp(2, vector<int>(2, 0));
    for(int i = 0; i < 2; i++) {
        for(int j = 0; j < 2; j++) {
            for(int k = 0; k < 2; k++) {
                temp[i][k] = (temp[i][k] + a[i][j] * b[j][k]) % mod;
            }
        }
    }
    result = temp;
}

void matrixExpo(vector<vector<int>> matrix, int n) {
    if(n == 0) {
        result = identityMatrix;
        return;
    }
    matrixExpo(matrix, n / 2);
    multiply(result, result);
    if(n & 1) {
        multiply(result, matrix);
    }
}

int nthFibonacciNumber(int n, int F0, int F1) { // Now accepts F0 and F1
    if(n == 0) return F0;
    if(n == 1) return F1;
    
    vector<vector<int>> baseMatrix = {
        {1, 1},
        {1, 0}
    };

    matrixExpo(baseMatrix, n - 1);
    
    // Compute Fibonacci using custom F0 and F1
    return (result[0][0] * F1 + result[0][1] * F0) % mod;
}